config: '{{ rundir }}/experiment.yaml'
data:
  '{{ rundir }}/anl.grib2': https://nomads.ncep.noaa.gov/pub/data/nccf/com/gfs/prod/gfs.{{ yyyymmdd }}/{{ hh }}/atmos/gfs.t{{ hh }}z.pgrb2.0p25.f000
hh: '{{ cycle.strftime("%H") }}'
mpas_init:
  boundary_conditions:
    interval_hours: 1
    length: 0
    offset: 0
    path: '{{ rundir }}'
  execution:
    envcmds:
      - module use /ncrc/proj/epic/spack-stack/c6/spack-stack-1.6.0/envs/unified-env/install/modulefiles/Core
      - module load stack-intel/2023.2.0 stack-cray-mpich/8.1.29 parallelio/2.5.10
    executable: '{{ mpasdir }}/init_atmosphere_model'
    mpiargs:
      - '--ntasks={{ init_cores }}'
    mpicmd: srun
  files_to_copy:
    graph.info.part.{{ init_cores }}: '{{ assets }}/x1.2562.graph.info.part.{{ init_cores }}'
    '{{ mpas_init.streams.input.filename_template }}': '{{ assets}}/x1.2562.static.nc'
    stream_list.atmosphere.diagnostics: '{{ mpasdir }}/stream_list.atmosphere.diagnostics'
    stream_list.atmosphere.output: '{{ mpasdir }}/stream_list.atmosphere.output'
    stream_list.atmosphere.surface: '{{ mpasdir }}/stream_list.atmosphere.surface'
  files_to_link:
    CAM_ABS_DATA.DBL: '{{ mpasdir }}/CAM_ABS_DATA.DBL'
    CAM_AEROPT_DATA.DBL: '{{ mpasdir }}/CAM_AEROPT_DATA.DBL'
    GENPARM.TBL: '{{ mpasdir }}/GENPARM.TBL'
    LANDUSE.TBL: '{{ mpasdir }}/LANDUSE.TBL'
    OZONE_DAT.TBL: '{{ mpasdir }}/OZONE_DAT.TBL'
    OZONE_LAT.TBL: '{{ mpasdir }}/OZONE_LAT.TBL'
    OZONE_PLEV.TBL: '{{ mpasdir }}/OZONE_PLEV.TBL'
    RRTMG_LW_DATA.DBL: '{{ mpasdir }}/RRTMG_LW_DATA.DBL'
    RRTMG_LW_DATA: '{{ mpasdir }}/RRTMG_LW_DATA'
    RRTMG_SW_DATA.DBL: '{{ mpasdir }}/RRTMG_SW_DATA.DBL'
    RRTMG_SW_DATA: '{{ mpasdir }}/RRTMG_SW_DATA'
    SOILPARM.TBL: '{{ mpasdir }}/SOILPARM.TBL'
    VEGPARM.TBL: '{{ mpasdir }}/VEGPARM.TBL'
  namelist:
    base_file: '{{ mpasdir }}/namelist.init_atmosphere'
    update_values:
      data_sources:
        config_fg_interval: !int '{{ mpas_init.boundary_conditions["interval_hours"] * 3600 }}'
        config_met_prefix: FILE
      decomposition:
        config_block_decomp_file_prefix: graph.info.part.
      nhyd_model:
        config_init_case: 7
      preproc_stages:
        config_native_gwd_static: false
        config_static_interp: false
    validate: true
  rundir: '{{ rundir }}'
  streams:
    input:
      filename_template: static.nc
      input_interval: initial_only
      mutable: false
      type: input
    output:
      filename_template: init.nc
      mutable: false
      output_interval: initial_only
      type: output
init_cores: 8
platform:
  account: '{{ account }}'
  scheduler: '{{ scheduler }}'
rundir: '{{ runroot }}/05'
ungrib:
  execution:
    executable: ungrib
  gribfiles:
    - '{{ rundir }}/anl.grib2'
  rundir: '{{ rundir }}'
  start: '{{ cycle }}'
  step: 1
  stop: '{{ cycle }}'
  vtable: '{{ "WPSFILES" | env }}/Vtable.GFS'
workflow:
  attrs:
    realtime: false
    scheduler: '{{ scheduler }}'
  cycledef:
    - attrs:
        group: default
      spec: '{{ yyyymmddhhmm }} {{ yyyymmddhhmm }} 00:00:01'
  log:
    value: '{{ rundir }}/rocoto.log'
  tasks:
    task_mpas_init:
      attrs:
        cycledefs: default
        maxtries: 1
      account: '{{ account }}'
      command: '{{ activate }} && uw mpas_init run -c {{ config }} --cycle {{ cycle.isoformat() }} && test -e {{ rundir }}/{{ mpas_init.streams.output.filename_template }}'
      dependency:
        taskdep:
          attrs:
            task: ungrib
      join: '{{ rundir }}/slurm.mpas_init'
      native: -M c6
      nodes: 1:ppn=1
      partition: batch
      walltime: "00:01:00"
    task_ungrib:
      attrs:
        cycledefs: default
        maxtries: 1
      account: '{{ account }}'
      command: '{{ activate }} && uw ungrib run -c {{ config }} --cycle {{ cycle.isoformat() }} && test -e {{ rundir }}/{{ mpas_init.namelist.update_values.data_sources.config_met_prefix }}:{{ cycle.strftime("%Y-%m-%d_%H") }}'
      join: '{{ rundir }}/slurm.ungrib'
      native: -M c6
      nodes: 1:ppn={{ init_cores }}
      partition: batch
      walltime: "00:01:00"
yyyymmdd: '{{ cycle.strftime("%Y%m%d") }}'
yyyymmddhhmm: '{{ cycle.strftime("%Y%m%d%H%M") }}'
